{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SmartRouting","text":"<p>Simple routing plugin that handles requests for different contexts.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>MODX Revolution 2.8+</li> <li>PHP 7.2+</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Switch the context based on a (sub)domain AND/OR subfolder.</li> <li>Define the routing based on the http_host and base_url context settings.</li> <li>Cache the http_host/base_url =&gt; context settings to avoid database lookups on page load.</li> </ul>"},{"location":"#license","title":"License","text":"<p>The project is licensed under the GPLv2 license.</p>"},{"location":"#translations","title":"Translations","text":"<p>Translations of the package can be made for the Default Lexicon and the System Setting Lexicon</p>"},{"location":"contributors/","title":"Contributors","text":"<p>The SmartRouting project was started in 2023 by Thomas Jakobi as rewrite of the popular XRouting extra for MODX. </p> <p>Unfortunately, this extra has not been updated in the MODX repository since 2015 and many unfixed issues have arisen since then, including the lack of full PHP 8 compatibility.</p> <p>Many thanks to all who contributed to XRouting and SmartRouting, whether by creating pull requests, submitting bug reports, or donating.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-modx-extras","title":"Install from MODX Extras","text":"<p>Search for SmartRouting in the Package Manager of your MODX installation and install it in there.</p>"},{"location":"installation/#manual-installation","title":"Manual installation","text":"<p>If you can't access the MODX Extras Repository in your MODX installation, you can manually install SmartRouting.</p> <ul> <li>Download the transport package from MODX Extras (or one of the pre built transport packages in _packages)</li> <li>Upload the zip file to your MODX installation's <code>core/packages</code> folder or upload it manually in the MODX Package Manager.</li> <li>In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.</li> <li>SmartRouting should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.</li> </ul>"},{"location":"installation/#build-it-from-source","title":"Build it from source","text":"<p>To build and install the package from source you could use Git Package Management. The GitHub repository of smartrouting contains a config.json to build that package locally. Use this option, if you want to debug SmartRouting and/or contribute bugfixes and enhancements.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#how-it-works","title":"How it works","text":"<p>SmartRouting is a simple plugin that handles requests for different contexts. It automatically switches the context based on a (sub)domain AND/OR subfolder.</p> <p>It's like the Gateway plugin from the MODX docs, except you don't have to manually edit the plugin: it takes the <code>http_host</code> and <code>base_url</code> settings you have already configured in your context and routes based on that. It caches the <code>http_host</code>/<code>base_url</code>-to-context relation, so it doesn't perform excessive database lookups.</p> <p>You can also fill the <code>http_host_aliases</code> context setting with a comma separated list to route multiple domains to one context.</p>"},{"location":"usage/#instructions","title":"Instructions","text":"<p>All you need to do is to install this plugin and make sure your contexts have <code>http_host</code>, <code>base_url</code>, <code>site_url</code>, <code>site_start</code> and optional <code>http_host_aliases</code> context settings set.</p> <p>To easily edit these context settings side by side, you can use the CrossContextsSettings extra.</p> <p>Caution</p> <p>Please make sure to add your <code>http_host</code> and <code>site_url</code> without <code>www.</code> when the  <code>smartrouting.include_www</code> setting is enabled (default!)</p>"},{"location":"usage/#system-settings","title":"System Settings","text":"<p>SmartRouting uses the following system settings in the namespace <code>smartrouting</code>:</p> Key Name Description Default smartrouting.allow_debug_info Allow debug output Enable this setting to output debug info if the &amp;smartrouting-debug=1 GET parameter is set. ATTENTION: disable it again after you debugged your installation, since this exposes a lot information of project! No smartrouting.default_context Default context The default context to redirect to if no matches were found and smartrouting.show_no_match_error is set to No. web smartrouting.include_www Include WWW-subdomain Specifies if the www-subdomain should automatically be included when matching against the base domain, ie. www.example.com should return the same context as example.com. Yes smartrouting.show_no_match_error Return error messages If set to yes, SmartRouting will return an error instead of redirecting to the default context. Yes"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":"<p>If your context routing isn't working as expected you can activate the <code>smartrouting.allow_debug_info</code> system setting and add <code>&amp;smartrouting-debug=1</code> to your URL to get a handy debug output. If you can't find any issue in your debug output feel free to open an issue and paste your debug output into the issue.</p>"}]}